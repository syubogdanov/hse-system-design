services:

  database:
    command: [ "-h", "${DATABASE_HOST:?}", "-p", "${DATABASE_PORT:?}" ]
    container_name: database
    environment:
      - POSTGRES_DB=${DATABASE_NAME:?}
      - POSTGRES_USER=${DATABASE_USERNAME:?}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:?}
    healthcheck:
      test: pg_isready -U ${DATABASE_USERNAME:?} -d ${DATABASE_PASSWORD:?} -h ${DATABASE_HOST:?} -p ${DATABASE_PORT:?}
      interval: 5s
      timeout: 10s
      retries: 10
    hostname: ${DATABASE_HOST:?}
    image: postgres:alpine3.19
    ports:
      - ${DATABASE_PORT:?}:${DATABASE_PORT:?}
    restart: unless-stopped

  migrations:
    build: ./
    command: |
      "
      alembic --config migrations/alembic.ini revision --autogenerate --message "migrations"
      alembic --config migrations/alembic.ini upgrade head
      "
    container_name: migrations
    depends_on:
      database:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c" ]
    environment:
      - DATABASE_HOST=${DATABASE_HOST:?}
      - DATABASE_PORT=${DATABASE_PORT:?}
      - DATABASE_NAME=${DATABASE_NAME:?}
      - DATABASE_USERNAME=${DATABASE_USERNAME:?}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:?}

  zookeeper:
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=${KAAS_ZOOKEEPER_PORT:?}
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc -w 2 localhost ${KAAS_ZOOKEEPER_PORT:?}" ]
      interval: 5s
      timeout: 10s
      retries: 10
    hostname: ${KAAS_ZOOKEEPER_HOST:?}
    image: confluentinc/cp-zookeeper:7.6.1
    restart: unless-stopped

  kafka:
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${KAAS_BROKER_HOST:?}:${KAAS_BROKER_PORT:?}
      - KAFKA_BROKER_PORT=${KAAS_BROKER_PORT:?}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_ZOOKEEPER_CONNECT=${KAAS_ZOOKEEPER_HOST:?}:${KAAS_ZOOKEEPER_PORT:?}
    healthcheck:
      test: kafka-topics --list --bootstrap-server localhost:${KAAS_BROKER_PORT:?}
      interval: 5s
      timeout: 10s
      retries: 10
    hostname: ${KAAS_BROKER_HOST:?}
    image: confluentinc/cp-kafka:7.6.1
    restart: unless-stopped

  topics:
    command: |
      "
      kafka-topics --bootstrap-server ${KAAS_BROKER_HOST:?}:${KAAS_BROKER_PORT:?} --create --if-not-exists --topic ${TOPIC_NAME_RESULTS:?} --partitions 1
      kafka-topics --bootstrap-server ${KAAS_BROKER_HOST:?}:${KAAS_BROKER_PORT:?} --create --if-not-exists --topic ${TOPIC_NAME_TRIGGERS:?} --partitions 1
      "
    container_name: topics
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c" ]
    image: confluentinc/cp-kafka:7.6.1

  kafka-ui:
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
      topics:
        condition: service_completed_successfully
    environment:
      - KAFKA_CLUSTERS_0_NAME=KaaS
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAAS_BROKER_HOST:?}:${KAAS_BROKER_PORT:?}
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - ${KAAS_UI_PORT:?}:8080

  config-stub-http-api:
    build: ./stubs/config/
    command: [ "--start-http-api" ]
    container_name: config-stub-http-api
    environment:
      - HTTP_API_HOST=${CONFIG_STUB_HTTP_API_HOST:?}
      - HTTP_API_PORT=${CONFIG_STUB_HTTP_API_PORT:?}
    healthcheck:
      test: curl --fail http://${CONFIG_STUB_HTTP_API_HOST:?}:${CONFIG_STUB_HTTP_API_PORT:?}/api/v1/healthcheck
      interval: 5s
      timeout: 10s
      retries: 10
    hostname: ${CONFIG_STUB_HTTP_API_HOST:?}
    ports:
      - ${CONFIG_STUB_HTTP_API_PORT:?}:${CONFIG_STUB_HTTP_API_PORT:?}
    restart: unless-stopped

  http-api:
    build: ./
    command: [ "--start-http-api" ]
    container_name: http-api
    depends_on:
      database:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      topics:
        condition: service_completed_successfully
    environment:
      - DATABASE_HOST=${DATABASE_HOST:?}
      - DATABASE_PORT=${DATABASE_PORT:?}
      - DATABASE_NAME=${DATABASE_NAME:?}
      - DATABASE_USERNAME=${DATABASE_USERNAME:?}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:?}
      - HTTP_API_HOST=${HTTP_API_HOST:?}
      - HTTP_API_PORT=${HTTP_API_PORT:?}
      - KAFKA_BOOTSTRAP_SERVERS=${KAAS_BROKER_HOST:?}:${KAAS_BROKER_PORT:?}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:?}
      - TOPIC_NAME_RESULTS=${TOPIC_NAME_RESULTS:?}
      - TOPIC_NAME_TRIGGERS=${TOPIC_NAME_TRIGGERS:?}
    healthcheck:
      test: curl --fail http://${HTTP_API_HOST:?}:${HTTP_API_PORT:?}/api/v1/healthcheck
      interval: 5s
      timeout: 10s
      retries: 10
    hostname: ${HTTP_API_HOST:?}
    ports:
      - ${HTTP_API_PORT:?}:${HTTP_API_PORT:?}
    restart: unless-stopped

  crontab:
    build: ./
    command: [ "--start-crontab" ]
    container_name: crontab
    depends_on:
      database:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      config-stub-http-api:
        condition: service_healthy
    environment:
      - CONFIG_HOST=${CONFIG_STUB_HTTP_API_HOST:?}
      - CONFIG_port=${CONFIG_STUB_HTTP_API_PORT:?}
      - DATABASE_HOST=${DATABASE_HOST:?}
      - DATABASE_PORT=${DATABASE_PORT:?}
      - DATABASE_NAME=${DATABASE_NAME:?}
      - DATABASE_USERNAME=${DATABASE_USERNAME:?}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:?}
    restart: unless-stopped

  stream:
    build: ./
    command: [ "--start-stream" ]
    container_name: stream
    depends_on:
      database:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      topics:
        condition: service_completed_successfully
    environment:
      - DATABASE_HOST=${DATABASE_HOST:?}
      - DATABASE_PORT=${DATABASE_PORT:?}
      - DATABASE_NAME=${DATABASE_NAME:?}
      - DATABASE_USERNAME=${DATABASE_USERNAME:?}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:?}
      - KAFKA_BOOTSTRAP_SERVERS=${KAAS_BROKER_HOST:?}:${KAAS_BROKER_PORT:?}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:?}
      - TOPIC_NAME_RESULTS=${TOPIC_NAME_RESULTS:?}
      - TOPIC_NAME_TRIGGERS=${TOPIC_NAME_TRIGGERS:?}
    restart: unless-stopped
